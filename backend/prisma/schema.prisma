generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  firstName String?
  lastName  String?
  phone     String?
  role      Role     @default(HANDLOWIEC)
  clients   Client[]
}

model Client {
  id               Int       @id @default(autoincrement())
  name             String
  createdAt        DateTime  @default(now())
  address          String?
  city             String?
  fromChina        Boolean   @default(false)
  interestedAIR    Boolean   @default(false)
  interestedFCL    Boolean   @default(false)
  interestedLCL    Boolean   @default(false)
  isExporter       Boolean   @default(false)
  isImporter       Boolean   @default(false)
  nip              String?   @unique
  updatedAt        DateTime  @updatedAt
  userId           Int
  website          String?
  zipCode          String?
  email            String?
  phone            String?
  status           String    @default("DO AKCEPTACJI")
  interestedFTL    Boolean   @default(false)
  interestedRAIL   Boolean   @default(false)
  clientClass      String?   @default("D")
  notes            String?
  daysBetweenTasks Int       @default(1)
  currentGoalId    Int?
  user             User      @relation(fields: [userId], references: [id])
  contacts         Contact[]
  tasks            Task[]

  @@index([userId], map: "Client_userId_fkey")
}

model Contact {
  id         Int     @id @default(autoincrement())
  clientId   Int
  firstName  String
  lastName   String
  email      String?
  phone      String?
  position   String?
  salutation String?
  client     Client  @relation(fields: [clientId], references: [id])

  @@index([clientId], map: "Contact_clientId_fkey")
}

model Goal {
  id    Int    @id @default(autoincrement())
  label String
  tasks Task[]
}

model Task {
  id        Int        @id @default(autoincrement())
  clientId  Int
  goalId    Int
  plannedAt DateTime
  doneAt    DateTime?
  notes     String?
  status    TaskStatus @default(PLANNED)
  createdAt DateTime   @default(now())
  client    Client     @relation(fields: [clientId], references: [id])
  goal      Goal       @relation(fields: [goalId], references: [id])

  @@index([clientId], map: "Task_clientId_fkey")
  @@index([goalId], map: "Task_goalId_fkey")
}

enum Role {
  ADMIN
  HANDLOWIEC
}

enum TaskStatus {
  PLANNED
  DONE
}
